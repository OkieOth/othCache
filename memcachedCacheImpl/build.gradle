apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = '1.7'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

project.group = 'de.othsoft.cache'
project.version = '0.1'


// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
/*
if (!hasProperty('mainClass')) {
    ext.mainClass = 'de.othsoft.cache.Dummy'
}
*/

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

publishing {
    repositories {
        maven {
            url "${System.getenv('HOME')}/myMavenRepos"
        }
    }
}

repositories {
    maven {
        url "${System.getenv('HOME')}/myMavenRepos"
    }
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.10'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.9'
    compile 'de.othsoft.cache:cacheBase:0.1'
    compile 'com.googlecode.xmemcached:xmemcached:2.0.0'
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration_test/java')
        }
        /* not needed this time
        resources.srcDir file('src/integration-test/resources')
        */
    }
}

task integrationTest(type: Test) {
    doFirst {
        // that's the place to start the test vagrant machine        
        println "project base directory: ${project.rootDir}/src/integration_test/vagrant/ubuntu_psql"
        println 'before integration tests - ' + new Date().getTime()
        def sout = new StringBuffer()
        def serr = new StringBuffer()
        def proc = "${project.rootDir}/src/test/scripts/startVagrant.sh".execute()
        proc.consumeProcessOutput(sout,serr)
        proc.waitForOrKill(20000)
        println "out: $sout \n err: $serr"
    }
    
    doLast {
        // that's the place to start the test vagrant machine
        def sout = new StringBuffer()
        def serr = new StringBuffer()
        def proc = "${project.rootDir}/src/test/scripts/stopVagrant.sh".execute()
        proc.consumeProcessOutput(sout,serr)
        proc.waitForOrKill(20000)
        println "out: $sout \n err: $serr"
        println 'after integration tests - ' + new Date().getTime()
    }
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test


tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
